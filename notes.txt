* using /bind'd hotkey when no mdi child focused == death

* hotkey for minimize to tray

* System tray icon option: flash, always phone, always blank

* something in tray tooltip that shows if msg are pending (a * would do)

* with common dialog open no messages are pumped

* delete failed get file if 0 bytes and file length > 0

* wxBug: bitmap button disabled mask not working (as if we wern't using wx/msw/wx.rc)
  reproduces in unmodified controls sample

* wxBug: each line read with wxTextFile has a null char on the end
  string_fix.patch is in Jason's local wxWindows checkout

* auto-reconnect if connection lost (due to timeout or kick for example)
  status messages should not be as verbose as existing /reconnect and should
  only say something like "*** Connection restored" after the "*** Connection lost"
  or "*** Ping timeout". make sure no auto-reconnect happens on a /quit

* don't add red line if own message

* option to auto /back if talk in main window or talk in any window

* when new word filter is added, recheck away msg and nicks
  (keep a copy of the nick/away msg before filtering and it for refiltering)

* some way to limit number of unACK'd bytes

* admin feature to change nicks

* admin feature to change away messages

* can't delete dir last sent from / recv to.

* if other side of file transfer is on same subnet as any of local subnets then
  set block size to 8192 KB else 2048 KB

* Mutex (win32 + unix)
	use same OS API as wxSingleInstanceChecker
	make sure recursive safe (int m_depth;)
	wxCriticalSection to protect m_depth;
	assert on unlocking an unlocked mutex
	assert on locked mutex during destruction
	use same class layout as TrayIcon
	void Lock();
	void Unlock();
	bool IsLocked() const;
	size_t GetLockDepth() const;

* multiple instances using one config file will cause data loss if both write
	* make ConfigFile extend wxConfigBase and forward to internal wx
	* the whole of any forwarding method should have the mutex locked
	* before forwarding anything, call EnsureLatestLoaded()
	* if (m_mutex->GetLockDepth() == 1) call Flush() after any modification
	  forwarding
	* constructor
		m_filename = GetConfigFilename();
		m_mutex = new Mutex(m_filename + wxT(".lock"));
		ReInit();
	* destructor
		wxASSERT_MSG(!m_mutex->IsLocked(), wxT("EndBatch() not called before
		  destroying ConfigFile"));	
	* Flush(bool);
		m_mutex->Lock();
		wxASSERT(IsLatestLoaded());
		bool ok = wxFileConfig::Flush();
		if (ok)
		{
			m_last_file_mod = GetLastFileModified();
		}
		m_mutex->Unlock();
		return ok;
	* protected wxDateTime GetLastFileModified() const;
	* void BeginBatch();
		m_mutex->Lock();
		EnsureLatestLoaded();
	* void EndBatch();
		wxASSERT_MSG(m_mutex->IsLocked(), wxT("EndBatch() without BeginBatch()"));
		Flush();
		m_mutex->Unlock();
	* bool IsLatestLoaded() const;
		m_mutex->Lock();
		bool latest = (m_last_file_mod == GetLastFileModified());
		m_mutex->Unlock();
		return latest;
	* ReInit()
		m_mutex->Lock();
		delete m_config;
		m_config = new wxFileConfig(wxT("dirt"), wxT(""), m_filename);
		m_config->SetUmask(0077);
		m_last_file_mod = GetLastFileModified();
		m_mutex->Unlock();
	* EnsureLatestLoaded
		m_mutex->Lock();
		if (!IsLatestLoaded())
		{
			ReInit();
		}
		m_mutex->Unlock();
	* some notification system to call PopulateFilteredWords() when config
	  file is changed remotely.

* UPnP IGD support for socket binds (transfers and server)

* SOCKS 4/5 BIND support for DCC Listen
  Seems the SOCKS protocol is too restrictive for our needs.
  This probably won't be possible to implement.

* lock for exclusive write any files opened by FileTransfers.cpp
  (make sure reading is still allowed)

* /dcc close complete, /dcc close all, /dcc close fail

* /dcc accept all

* Window
	Close
		Current Ctrl-F4
		Query Windows
		Transfers
			All
			Pending
			Completed and Failed

* investigate using #if wxUSE_UXTHEME / wxUxThemeEngine wx/msw/uxtheme.h
  for SwitchBar on Windows XP/2003

* nice about screen (wxHtmlWindow maybe?)

* /notice

* /lock

* WTS event bindings: Terminal_Connect, Disconnect, Lock, Unlock

* other scriptable bindings: Dirt_AuthPrompt, Connect, Disconnect

* split /lanlist into a UI and model interface and model implementation

* add a server list model implementation for public list (dirt.pl)

* Win32: fast incoming messages cause FlashWindow() not to work on at least WinXP
  Maybe restrict the time between FlashWindow() calls to say 1 second except if
  the window just got focused/unfocused (wxActivateEvent)

* ability to search multiple logs

* force full line selection if holding control when highlighting in logcontrol

* [x] close window on complete

* [x] close window on fail

* client options dialog
	file transfers
		[x] auto close
			on complete
				[x] send [x] receive
			on remote cancel
				[x] send [x] receive
			on fail
				[x] send [x] receive
		[x] auto accept
			directory with browse button

* add kde extension for /resetwindowpos

* speed limiting on file transfers

* delete file after sent, delete file

* update dirt homepage to extract details from exe and show latest ver number and
  modified date (preferably from RCS data, but last modified date would probably
  be okay)

* dirt:// protocol registration for mozilla on X11

* is there a way to tell gethostbyname() to cancel?
  (so we can speed up DNS::Cancel())

* only scroll to bottom if scrollpos was already at or near bottom
  and no scroll in progress and no selection in progress.
  also do red line if no scroll this time (maybe also a sound?)

* scripting (/exec and /eval)

* create script to generate crypto++ makefiles and change to crypto++ cvs head

* banning (wxIsWild(), wxMatchWild(), wxString::Matches())

* hide /oper password when being typed

* option to ignore colour/bold/etc

* highlighting has bugs on gtk (when updates happen while highlighting)

* when colour popup shows on GTK cannot programmically focus back to main window

* allow saving of passwords for servers

* optional password protection for saved passwords and private keys in dirt.ini

* notices to users via console@server

* automaticly check for new versions of Win32 Dirt on dirtchat.sourceforge.net

* confirm exit when connected option for client?

* spawn other processes in seperate thread

* prefix caption with number in brackets showing how many msgs are waiting?

* /font (wxHtmlWindow::SetFonts() and maybe also drop <code/> usage)
	Use wxWin 2.5's default sizes if avail else use hardcoded for wxWin 2.4

* use Arial Unicode MS to display CJK characters if current font doesn't support

* remove msvcp60.dll dependency?

* research that log control gdi thing in 9x
  seems to be caused by LOTS of wxFont instances
  Perhaps you should if 9x, if messagelog.length > x
  SAY Warning: 9x about to run out of GDI resources
  Win9x Resource Meter uses GetFreeSystemResources (16 bit only)

* non-wrapping lines have row of blank pixels underneath (related to font?)

* check that guards are in place where necessary to trap malformed messages

* replace TrayIcon with wxTaskBarIcon and then remove all KDE calls
  (after confirming TaskbarCreated and X11 support exists in 2.4.1)
  (and also after workaround for non-supporting X11 WMs somehow is done in wx)
